openapi: 3.1.0
info:
  title: API with authentication + tags
  description: API with authentication + tags
  version: 1.0.0
servers:
  - url: 'http:localhost:8000'

tags:
  - name: Products
    description: Product management related-activities
  - name: Orders
    description: Order management operations

components:
  schemas:
    Product:
      type: object
      properties:
        name:
          type: string
        expiration_datetime:
          type: string
          format: date-time
        price:
          type: number
          format: float
    Order:
      type: object
      properties:
        identifier:
          type: integer
        customer_name:
          type: string
        creation_datetime:
          type: string
          format: date-time
        total_amount:
          type: number
          format: float
    Error:
      type: object
      properties:
        message:
          type: string
          example: "Invalid order/product data"
      required:
        - message
  parameters:
    Limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        required: false
        description: Maximum number of products to be returned
    Query:
      name: q
      in: query
      schema:
        type: string
        required: false
        description: Search term
    Page:
      name: page
      in: query
      schema:
        type: integer
        required: true
    Size:
      name: size
      in: query
      schema:
        type: integer
        required: true
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

paths:
  /products:
    get:
      tags:
        - Products
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Query"
      responses:
        200:
          description: List of Products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
              examples:
                nonEmptyList:
                  summary: List of products
                  value:
                    - name: "Milk"
                      expiration_datetime: "2026-08-31T17:45:30Z"
                      price: 12000.0
                    - name: "Cookies"
                      expiration_datetime: "2025-12-22T10:25:37Z"
                      price: 25000.0
                emptyList:
                  summary: Empty List
                  value: []
        404:
          description: No product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "No products found"
  /orders:
    get:
      tags:
        - Orders
      responses:
        200:
          description: Paginated order List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
              examples:
                - id: 1
                  order_date: "2025-09-01T09:54:00Z"
                  products:
                    - name: "Milk"
                      expiration_datetime: "2026-08-31T17:45:30Z"
                      price: 12000.0
                - id: 2
                  order_date: "2025-09-02T10:00:00Z"
                  products:
                    - name: "Cookies"
                      expiration_datetime: "2025-12-22T10:25:37Z"
                      price: 25000.0
        404:
          description: No orders found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "No orders found"
    post:
      tags:
        - Orders
      description: Create an order with a list of products, protected by Basic authentication
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/Order"
            example:
              id: 3
              order_date: "2025-09-03T14:30:00Z"
              products:
                - name: "Milk"
                  expiration_datetime: "2026-08-31T17:45:30Z"
                  price: 12000.0
                - name: "Cookies"
                  expiration_datetime: "2025-12-22T10:25:37Z"
                  price: 25000.0
      responses:
        201:
          description: Create an order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
              example:
                id: 3
                order_date: "2025-09-03T14:30:00Z"
                products:
                  - name: "Milk"
                    expiration_datetime: "2026-08-31T17:45:30Z"
                    price: 12000.0
                  - name: "Cookies"
                    expiration_datetime: "2025-12-22T10:25:37Z"
                    price: 25000.0
        400:
          description: Invalid order data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Invalid order data"
        401:
          description: Authorization required or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Authorization required or invalid"


  
